// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: page.sql

package db

import (
	"context"
)

const createPage = `-- name: CreatePage :one
INSERT INTO page (action, author, body)
VALUES ($1, $2, $3)
RETURNING id, author, has_img, action, body
`

type CreatePageParams struct {
	Action string
	Author int64
	Body   string
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (Page, error) {
	row := q.db.QueryRowContext(ctx, createPage, arg.Action, arg.Author, arg.Body)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.HasImg,
		&i.Action,
		&i.Body,
	)
	return i, err
}

const deletePage = `-- name: DeletePage :exec
DELETE FROM page
WHERE id = $1
`

func (q *Queries) DeletePage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePage, id)
	return err
}

const getPage = `-- name: GetPage :one
SELECT id, author, has_img, action, body FROM page
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPage(ctx context.Context, id int64) (Page, error) {
	row := q.db.QueryRowContext(ctx, getPage, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.HasImg,
		&i.Action,
		&i.Body,
	)
	return i, err
}

const setImgPage = `-- name: SetImgPage :exec
UPDATE page
SET has_img = $2
WHERE id = $1
`

type SetImgPageParams struct {
	ID     int64
	HasImg bool
}

func (q *Queries) SetImgPage(ctx context.Context, arg SetImgPageParams) error {
	_, err := q.db.ExecContext(ctx, setImgPage, arg.ID, arg.HasImg)
	return err
}

const updatePage = `-- name: UpdatePage :exec
UPDATE page
SET
  action = CASE WHEN $2::boolean
    THEN $3::VARCHAR(32) ELSE action END,

  body = CASE WHEN $4::boolean
    THEN $5::VARCHAR(4096) ELSE body END
WHERE id = $1
`

type UpdatePageParams struct {
	ID             int64
	ActionDoUpdate bool
	Action         string
	BodyDoUpdate   bool
	Body           string
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) error {
	_, err := q.db.ExecContext(ctx, updatePage,
		arg.ID,
		arg.ActionDoUpdate,
		arg.Action,
		arg.BodyDoUpdate,
		arg.Body,
	)
	return err
}
