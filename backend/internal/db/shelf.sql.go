// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: shelf.sql

package db

import (
	"context"
	"database/sql"
)

const addToShelf = `-- name: AddToShelf :exec
INSERT INTO shelf (owner_id, story_id)
VALUES ($1, $2)
RETURNING owner_id, story_id
`

type AddToShelfParams struct {
	OwnerID int64
	StoryID int64
}

func (q *Queries) AddToShelf(ctx context.Context, arg AddToShelfParams) error {
	_, err := q.db.ExecContext(ctx, addToShelf, arg.OwnerID, arg.StoryID)
	return err
}

const getOnShelf = `-- name: GetOnShelf :one
SELECT owner_id, story_id FROM shelf
WHERE owner_id = $1 AND story_id = $2
LIMIT 1
`

type GetOnShelfParams struct {
	OwnerID int64
	StoryID int64
}

func (q *Queries) GetOnShelf(ctx context.Context, arg GetOnShelfParams) (Shelf, error) {
	row := q.db.QueryRowContext(ctx, getOnShelf, arg.OwnerID, arg.StoryID)
	var i Shelf
	err := row.Scan(&i.OwnerID, &i.StoryID)
	return i, err
}

const getShelf = `-- name: GetShelf :many
SELECT st.id, st.title, st.description, u.username as author_name FROM shelf sh
JOIN story st ON sh.story_id = st.id
JOIN "user" u ON st.author = u.id
WHERE sh.owner_id = $1
ORDER BY st.id
LIMIT 30
OFFSET 30 * ($2 - 1)
`

type GetShelfParams struct {
	OwnerID int64
	Column2 interface{}
}

type GetShelfRow struct {
	ID          int64
	Title       string
	Description sql.NullString
	AuthorName  string
}

func (q *Queries) GetShelf(ctx context.Context, arg GetShelfParams) ([]GetShelfRow, error) {
	rows, err := q.db.QueryContext(ctx, getShelf, arg.OwnerID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetShelfRow
	for rows.Next() {
		var i GetShelfRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.AuthorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFromShelf = `-- name: RemoveFromShelf :exec
DELETE FROM shelf
WHERE owner_id = $1 AND story_id = $2
`

type RemoveFromShelfParams struct {
	OwnerID int64
	StoryID int64
}

func (q *Queries) RemoveFromShelf(ctx context.Context, arg RemoveFromShelfParams) error {
	_, err := q.db.ExecContext(ctx, removeFromShelf, arg.OwnerID, arg.StoryID)
	return err
}
