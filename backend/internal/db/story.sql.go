// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: story.sql

package db

import (
	"context"
	"database/sql"
)

const createStory = `-- name: CreateStory :one
INSERT INTO story (title, description)
VALUES ($1, $2)
RETURNING id, title, description, author, first_page_id
`

type CreateStoryParams struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) CreateStory(ctx context.Context, arg CreateStoryParams) (Story, error) {
	row := q.db.QueryRowContext(ctx, createStory, arg.Title, arg.Description)
	var i Story
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.FirstPageID,
	)
	return i, err
}

const deleteStory = `-- name: DeleteStory :exec
DELETE FROM story
WHERE id = $1
`

func (q *Queries) DeleteStory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStory, id)
	return err
}

const getStory = `-- name: GetStory :one
SELECT id, title, description, author, first_page_id FROM story
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStory(ctx context.Context, id int64) (Story, error) {
	row := q.db.QueryRowContext(ctx, getStory, id)
	var i Story
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.FirstPageID,
	)
	return i, err
}

const listStories = `-- name: ListStories :many
SELECT id, title, description, author, first_page_id FROM story
ORDER BY title
`

func (q *Queries) ListStories(ctx context.Context) ([]Story, error) {
	rows, err := q.db.QueryContext(ctx, listStories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Story
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Author,
			&i.FirstPageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchStories = `-- name: SearchStories :many
SELECT id, title, description, author, first_page_id FROM story s
WHERE title LIKE '%' || $1 || '%'
ORDER BY title
`

func (q *Queries) SearchStories(ctx context.Context, title sql.NullString) ([]Story, error) {
	rows, err := q.db.QueryContext(ctx, searchStories, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Story
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Author,
			&i.FirstPageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
